{"version":3,"file":"static/js/549.083b550e.chunk.js","mappings":"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","sources":["components/Catalogs/EmptyCatalog/EmptyCatalogItem.js","components/Preview/Preview.js","components/UI/Trigger/Trigger.js","hooks/redux.ts","hooks/useObserver.js","components/Sections/OngoingSection.js","components/Sections/NewsSection.js","components/Sections/ContentSection.js","components/Sections/AnimeUpdatesSection.js","components/Sections/NewsCatalog.js","pages/Home.js","utils/dateCalculations.ts","utils/textTransform.ts"],"sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport Preview from \"../../Preview/Preview\";\r\nimport { kindTransform, urlTransform } from \"../../../utils/textTransform\";\r\n\r\nconst EmptyCatalogItem = ({ element, imageType }) => {\r\n  return (\r\n    <article className=\"c-column b-catalog_entry c-anime\">\r\n      <Link\r\n        element={element}\r\n        className=\"cover anime-tooltip-processed\"\r\n        to={urlTransform(element.kind, element.url)}\r\n        state={element}\r\n      >\r\n        <span className=\"image-decor\">\r\n          <span className=\"image-cutter\">\r\n            <Preview\r\n              element={element}\r\n              imageType={element.image[imageType]}\r\n            />\r\n          </span>\r\n        </span>\r\n        <span className={`title ${imageType === \"preview\" ? \"left_aligned\" : \"two_lined\"}`}>{element.name}</span>\r\n        {imageType === \"preview\" ? (\r\n          <span className=\"misc\">\r\n            <span>{kindTransform(element.kind)}</span>\r\n            <span>{element.aired_on ? element.aired_on.split(\"-\")[0] : \"\"}</span>\r\n          </span>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default EmptyCatalogItem;\r\n","import { hostUrl } from \"../../const/urlConsts\";\r\n\r\nconst Preview = ({ element, imageType }) => {\r\n  // console.log(imageType);\r\n  let url = \"\";\r\n  imageType.includes(\"http\") ? (url = imageType) : (url = hostUrl + imageType);\r\n\r\n  return (\r\n    <picture>\r\n      <source\r\n        srcSet={url}\r\n        type=\"image/webp\"\r\n      />\r\n      <img\r\n        alt={element.name}\r\n        src={url}\r\n        srcSet={url}\r\n      />\r\n    </picture>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","const Trigger = ({ target }) => {\r\n  return (\r\n    <div\r\n      style={{ height: \"3rem\" }}\r\n      ref={target}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Trigger;\r\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"../store/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { useEffect, useRef } from \"react\";\r\n\r\nconst useObserver = (ref, isLoading, callback) => {\r\n  const observer = useRef();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    const observerOptions = {\r\n      threshold: 1\r\n    };\r\n    observer.current = new IntersectionObserver((entries) => {\r\n      if (entries[0].isIntersecting) {\r\n        callback();\r\n      }\r\n    }, observerOptions);\r\n    observer.current.observe(ref.current);\r\n  }, [ref, isLoading, callback]);\r\n};\r\n\r\nexport default useObserver;\r\n","import { Link } from \"react-router-dom\";\r\nimport { api } from \"../../services/Api\";\r\nimport { UrlParts } from \"../../const/urlConsts\";\r\nimport { Suspense, useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport EmptyCatalogItem from \"../Catalogs/EmptyCatalog/EmptyCatalogItem\";\r\nimport { useAppDispatch } from \"../../hooks/redux\";\r\nimport { updateFilter } from \"../../store/reducers/FilterSlice\";\r\nimport { restoreCollectionFilter } from \"../../store/reducers/PageParams\";\r\n\r\nconst OngoingSection = () => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const queryParams = {\r\n    limit: 8,\r\n    status: \"ongoing\",\r\n    order: \"popularity\",\r\n    season: 2024\r\n  };\r\n  const url = UrlParts.ANIMES;\r\n  const { data, isSuccess } = api.useGetElementsQuery({ url, queryParams });\r\n\r\n  const param = \"/status/ongoing\";\r\n  const loadFuction = () => {\r\n    dispatch(updateFilter([\"status\", \"ongoing\"]));\r\n    dispatch(restoreCollectionFilter([\"restoreCollectionFilter\", false]));\r\n  };\r\n\r\n  //rerendering if data has been changed\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      setElements(data);\r\n    }\r\n  }, [data, isSuccess]);\r\n\r\n  return (\r\n    <Suspense fallback={Spinner}>\r\n      <div className=\"block2\">\r\n        <div className=\"subheadline linkheadline m15\">\r\n          <Link\r\n            to={`${UrlParts.ANIMES}${param}`}\r\n            onClick={loadFuction}\r\n          >\r\n            Now on screens\r\n          </Link>\r\n        </div>\r\n        <div className=\"fc-ongoings\">\r\n          <div className=\"mobile-slider-prev bright\" />\r\n          <div className=\"mobile-slider-next bright\" />\r\n          <div className=\"inner\">\r\n            {isSuccess ? (\r\n              elements.map((element) => (\r\n                <EmptyCatalogItem\r\n                  key={element.id}\r\n                  element={element}\r\n                  imageType=\"preview\"\r\n                />\r\n              ))\r\n            ) : (\r\n              <Spinner />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default OngoingSection;\r\n","import { Link } from \"react-router-dom\";\r\nimport { api } from \"../../services/Api\";\r\nimport { UrlParts } from \"../../const/urlConsts\";\r\nimport { Suspense, useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport { timeFromPublication } from \"../../utils/dateCalculations\";\r\n\r\nconst NewsSection = () => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  const queryParams = {\r\n    forum: \"news\",\r\n    limit: 2\r\n  };\r\n  const url = UrlParts.TOPICS;\r\n  const { data, isSuccess } = api.useGetElementsQuery({ url, queryParams });\r\n\r\n  //rerendering if data has been changed\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      setElements(data);\r\n    }\r\n  }, [data, isSuccess]);\r\n\r\n  return (\r\n    <Suspense fallback={Spinner}>\r\n      <div className=\"block2\">\r\n        <div className=\"subheadline-buttons\">\r\n          <Link\r\n            className=\"b-link_button dark mini create-topic\"\r\n            href=\"/\"\r\n            title=\"Написать новость\"\r\n          >\r\n            <span>Add news</span>\r\n          </Link>\r\n        </div>\r\n        <div className=\"headline linkheadline orange\">News</div>\r\n        <div className=\"news_wall latest-news\">\r\n          {isSuccess ? (\r\n            elements.map((element) => (\r\n              <article\r\n                key={element.id}\r\n                className=\"b-news_wall-topic\"\r\n              >\r\n                <Link\r\n                  to={`${element.url}`}\r\n                  title={element.topic_title}\r\n                >\r\n                  <div className=\"poster\">\r\n                    <div className=\"b-shiki_swiper\">\r\n                      {}\r\n                      <img\r\n                        className=\"b-image\"\r\n                        src={new DOMParser().parseFromString(element.html_footer, \"text/html\").getElementsByTagName(\"img\")[0].src}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"status-line\">\r\n                    {element.linked ? (\r\n                      <div className=\"tags\">\r\n                        <div\r\n                          className=\"b-anime_status_tag other\"\r\n                          data-text={element.linked.status}\r\n                        ></div>\r\n                        <div\r\n                          className=\"b-anime_status_tag other\"\r\n                          data-text={element.linked.kind}\r\n                        ></div>\r\n                      </div>\r\n                    ) : (\r\n                      <div></div>\r\n                    )}\r\n                    <time>{timeFromPublication(element.created_at)}</time>\r\n                    <div className=\"comments\">{element.comments_count}</div>\r\n                  </div>\r\n                  <div className=\"title\">{element.topic_title}</div>\r\n                </Link>\r\n              </article>\r\n            ))\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default NewsSection;\r\n","import { Suspense } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\n\r\nconst ContentSection = () => {\r\n  return (\r\n    <Suspense fallback={Spinner}>\r\n      <div className=\"block2\">\r\n        <div className=\"fc-2_3\">\r\n          <div className=\"f-column\">\r\n            <div className=\"headline skyblue\">\r\n              Content\r\n              <div className=\"misc-links\">\r\n                <a href=\"https://shikimori.one/collections\">Collections</a>\r\n                <a href=\"https://shikimori.one/forum/critiques\">Critiques</a>\r\n                <a href=\"https://shikimori.one/articles\">Articles</a>\r\n              </div>\r\n            </div>\r\n            <div className=\"content-updates\"></div>\r\n          </div>\r\n          <div className=\"f-column\">\r\n            <div className=\"headline\">Topics of the day</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default ContentSection;\r\n","import { Suspense, useEffect, useState } from \"react\";\r\nimport { api } from \"../../services/Api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport { UrlParts } from \"../../const/urlConsts\";\r\nimport Preview from \"../Preview/Preview\";\r\nimport { timeFromPublication } from \"../../utils/dateCalculations\";\r\nimport _ from \"lodash\";\r\nimport { firstLetterUpperCase, kindTransform } from \"../../utils/textTransform\";\r\n\r\nconst AnimeUpdatesSection = () => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  const queryParams = {\r\n    limit: 30\r\n  };\r\n\r\n  const url = UrlParts.TOPICS + UrlParts.UPDATES;\r\n  const { data, isSuccess } = api.useGetElementsQuery({ url, queryParams });\r\n\r\n  //rerendering if data has been changed\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      let animeUpdated = [];\r\n      data.forEach((element) => {\r\n        switch (element.linked.kind) {\r\n          case \"tv\":\r\n          case \"movie\":\r\n          case \"ova\":\r\n          case \"ona\":\r\n          case \"special\":\r\n          case \"music\":\r\n            animeUpdated.push(element);\r\n            break;\r\n          default:\r\n        }\r\n      });\r\n      setElements(_.uniqBy(animeUpdated, (element) => element.linked.id).slice(0, 8));\r\n    }\r\n  }, [data, isSuccess]);\r\n\r\n  return (\r\n    <Suspense fallback={Spinner}>\r\n      <div className=\"block2\">\r\n        <div className=\"headline linkheadline magenta m15\">\r\n          <Link to=\"/\">Anime Updates</Link>\r\n        </div>\r\n        <div className=\"db-updates\">\r\n          <div className=\"mobile-slider-prev bright\" />\r\n          <div className=\"mobile-slider-next bright\" />\r\n          <div className=\"inner\">\r\n            {isSuccess ? (\r\n              elements.map((element) => (\r\n                <Link\r\n                  to={element.linked.url}\r\n                  key={element.id}\r\n                  className=\"db-update unprocessed bubbled-processed\"\r\n                >\r\n                  <div className=\"poster\">\r\n                    <Preview\r\n                      element={element}\r\n                      imageType={element.linked.image.x48}\r\n                    />\r\n                  </div>\r\n                  <div className=\"info\">\r\n                    <div className=\"name\">{element.linked.name}</div>\r\n                    <div className=\"status-time\">\r\n                      <div\r\n                        className={`b-anime_status_tag ${element.linked.status}`}\r\n                        data-text={firstLetterUpperCase(element.linked.status)}\r\n                      ></div>\r\n                      <time>{timeFromPublication(element.created_at)}</time>\r\n                    </div>\r\n                    <div className=\"tags\">\r\n                      <div className=\"b-anime_status_tag studio\">{kindTransform(element.linked.kind)}</div>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              ))\r\n            ) : (\r\n              <Spinner />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default AnimeUpdatesSection;\r\n","import { api } from \"../../services/Api\";\r\nimport { UrlParts } from \"../../const/urlConsts\";\r\nimport { useRef, useEffect, useState, Suspense } from \"react\";\r\nimport useObserver from \"../../hooks/useObserver\";\r\nimport Trigger from \"../UI/Trigger/Trigger\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { timeFromPublication } from \"../../utils/dateCalculations\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\n\r\nconst NewsCatalog = () => {\r\n  const [elements, setElements] = useState([]);\r\n  const [page, setPage] = useState(2);\r\n  const [isObserverLoading, setIsObserverLoading] = useState(false);\r\n\r\n  const queryParams = {\r\n    forum: \"news\",\r\n    limit: 3,\r\n    page: page\r\n  };\r\n\r\n  const url = UrlParts.TOPICS;\r\n  const { data, isFetching, isSuccess } = api.useGetElementsQuery({ url, queryParams });\r\n\r\n  //rerendering if data has been changed\r\n  useEffect(() => {\r\n    if (isSuccess && isObserverLoading) {\r\n      const arr = [...data];\r\n      arr.pop();\r\n      setElements([...elements, ...arr]);\r\n    }\r\n    if (isSuccess && !isObserverLoading) {\r\n      const arr = [...data];\r\n      arr.pop();\r\n      setElements([...arr]);\r\n    }\r\n    setIsObserverLoading(false);\r\n  }, [data]);\r\n\r\n  //observer setup\r\n  const lastElement = useRef();\r\n  const observerFunctions = () => {\r\n    setPage(page + 1);\r\n    setIsObserverLoading(true);\r\n  };\r\n  useObserver(lastElement, isFetching, () => observerFunctions());\r\n\r\n  return (\r\n    <Suspense fallback={Spinner}>\r\n      <div className=\"block2\">\r\n        <div className=\"headline skyblue m15\">More news</div>\r\n        <div className=\"news_wall other-news\">\r\n          {isSuccess && elements.length > 0 ? (\r\n            elements.map((element) => (\r\n              <article\r\n                key={element.id}\r\n                className=\"b-news_wall-topic\"\r\n              >\r\n                <Link\r\n                  to={element.url}\r\n                  title={element.topic_title}\r\n                >\r\n                  <div className=\"poster\">\r\n                    <div className=\"b-shiki_swiper\">\r\n                      <img\r\n                        className=\"b-image\"\r\n                        src={new DOMParser().parseFromString(element.html_footer, \"text/html\").getElementsByTagName(\"img\")[0].src}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"status-line\">\r\n                    {/* <div className=\"tags\">\r\n                      <div\r\n                        className=\"b-anime_status_tag other\"\r\n                        data-text={element.linked.status}\r\n                      ></div>\r\n                      <div\r\n                        className=\"b-anime_status_tag other\"\r\n                        data-text={element.linked.kind}\r\n                      ></div>\r\n                    </div> */}\r\n                    <time>{timeFromPublication(element.created_at)}</time>\r\n                    <div className=\"comments\">{element.comments_count}</div>\r\n                  </div>\r\n                  <div className=\"title\">{element.topic_title}</div>\r\n                </Link>\r\n              </article>\r\n            ))\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n        </div>\r\n        {isSuccess ? <Trigger target={lastElement}></Trigger> : \"\"}\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default NewsCatalog;\r\n","import { useEffect } from \"react\";\r\nimport { useAppDispatch } from \"../hooks/redux\";\r\nimport { updateTitle } from \"../store/reducers/PageParams\";\r\nimport OngoingSection from \"../components/Sections/OngoingSection\";\r\nimport NewsSection from \"../components/Sections/NewsSection\";\r\nimport ContentSection from \"../components/Sections/ContentSection\";\r\nimport AnimeUpdatesSection from \"../components/Sections/AnimeUpdatesSection\";\r\nimport NewsCatalog from \"../components/Sections/NewsCatalog\";\r\nimport { elementVisibility } from \"../store/reducers/MenuParams\";\r\n\r\nconst Home = (props) => {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(updateTitle(\"Home\"));\r\n    dispatch(elementVisibility([\"search\", false]));\r\n  });\r\n  return (\r\n    <section className=\"p-dashboards p-dashboards-show x1200 l-page\">\r\n      <OngoingSection />\r\n      <NewsSection />\r\n      <ContentSection />\r\n      <AnimeUpdatesSection />\r\n      <NewsCatalog />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export const timeFromPublication = (date: Date) => {\r\n  const time = Date.now();\r\n  const publicationDate = new Date(date);\r\n  const dateDifference = time - publicationDate.getTime();\r\n\r\n  const second = 1000;\r\n  const minute = 1000 * 60;\r\n  const hour = minute * 60;\r\n  const day = hour * 24;\r\n  const year = day * 365;\r\n\r\n  let seconds = Math.round(dateDifference / second);\r\n  let minutes = Math.round(dateDifference / minute);\r\n  let hours = Math.round(dateDifference / hour);\r\n  let days = Math.round(dateDifference / day);\r\n  let years = Math.round(dateDifference / year);\r\n\r\n  if (dateDifference < 1 * minute) {\r\n    return seconds + \" seconds ago\";\r\n  }\r\n  if (dateDifference > 1 * minute && dateDifference < 1 * hour) {\r\n    return minutes + \" minutes ago\";\r\n  }\r\n  if (dateDifference > 1 * hour && dateDifference < 1 * day) {\r\n    return hours + \" hours ago\";\r\n  }\r\n  if (dateDifference > 1 * day && dateDifference < 1 * year) {\r\n    return days + \" days ago\";\r\n  }\r\n  if (dateDifference > 1 * year) {\r\n    return years + \" years ago\";\r\n  }\r\n};\r\n\r\nexport const getYear = (date: Date) => {\r\n  return new Date(date).getFullYear();\r\n};\r\n\r\nexport const getYearGap = (airDate: string, releaseDate: string) => {\r\n  return releaseDate ? (`${airDate.substring(0, 4)} - ${releaseDate.substring(0, 4)}`) : (`${airDate.substring(0, 4)}`);\r\n};\r\n\r\nexport const transformDate = (inputDate: Date) => {\r\n  let date = new Date(inputDate);\r\n  let year = date.getFullYear();\r\n  let month = (\"0\" + (date.getMonth() + 1)).slice(-2);\r\n  let day = (\"0\" + date.getDate()).slice(-2);\r\n  let hours = (\"0\" + date.getHours()).slice(-2);\r\n  let minutes = (\"0\" + date.getMinutes()).slice(-2);\r\n  return `${year}-${month}-${day} - ${hours}:${minutes}`;\r\n};\r\n","export const kindTransform = (kind: string) => {\r\n  let outputKind: string = \"\";\r\n  switch (kind) {\r\n    case \"tv\":\r\n      outputKind = \"TV series\";\r\n      break;\r\n    default:\r\n      outputKind = kind.replace(/_/g, \" \").replace(kind[0], kind[0].toUpperCase());\r\n  }\r\n  return outputKind;\r\n};\r\n\r\nexport const urlTransform = (kind: string, url: string) => {\r\n  let transformedUrl: string = \"\";\r\n  kind === \"light_novel\" || kind === \"novel\" ? (transformedUrl = url.replace(/mangas/g, \"ranobe\")) : (transformedUrl = url);\r\n  return transformedUrl;\r\n};\r\n\r\nexport const firstLetterUpperCase = (InputStr: string) => {\r\n  return InputStr.replace(InputStr[0], InputStr[0].toUpperCase());\r\n};\r\n"],"names":["_ref","element","imageType","_jsx","className","children","_jsxs","Link","to","urlTransform","kind","url","state","Preview","image","concat","name","kindTransform","aired_on","split","includes","hostUrl","srcSet","type","alt","src","target","style","height","ref","useAppDispatch","useDispatch","useAppSelector","useSelector","useObserver","isLoading","callback","observer","useRef","useEffect","current","disconnect","IntersectionObserver","entries","isIntersecting","threshold","observe","OngoingSection","elements","setElements","useState","dispatch","UrlParts","ANIMES","data","isSuccess","api","useGetElementsQuery","queryParams","limit","status","order","season","Suspense","fallback","Spinner","onClick","loadFuction","updateFilter","restoreCollectionFilter","map","EmptyCatalogItem","id","NewsSection","TOPICS","forum","href","title","topic_title","DOMParser","parseFromString","html_footer","getElementsByTagName","linked","timeFromPublication","created_at","comments_count","ContentSection","AnimeUpdatesSection","UPDATES","animeUpdated","forEach","push","_","slice","x48","firstLetterUpperCase","NewsCatalog","page","setPage","isObserverLoading","setIsObserverLoading","isFetching","arr","pop","lastElement","length","Trigger","props","updateTitle","elementVisibility","date","dateDifference","Date","now","getTime","minute","hour","day","year","seconds","Math","round","minutes","hours","days","years","getYear","getFullYear","getYearGap","airDate","releaseDate","substring","transformDate","inputDate","month","getMonth","getDate","getHours","getMinutes","outputKind","replace","toUpperCase","transformedUrl","InputStr"],"sourceRoot":""}